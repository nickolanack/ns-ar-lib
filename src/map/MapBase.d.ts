import { MapView, Marker, Polygon } from 'nativescript-google-maps-sdk';
import { Observable } from "@nativescript/core";
import { MapModes } from './MapModes';
import { Layer } from './Layer';
import { MapActionButtons } from './MapActionButtons';
export declare abstract class MapBase extends Observable {
    protected _map: MapView;
    protected _options: any;
    protected _renderer: any;
    protected _layerObjects: Array<any>;
    protected _mapModes: MapModes;
    protected _mapActionButons: any | MapActionButtons;
    protected _layers: Array<any> | null;
    constructor(map: any, options: any);
    showStreetView(): void;
    getLayers(): any[];
    getMapView(): MapView;
    resetMapView(callback?: any): Promise<void>;
    abstract setZoomAndCenter(number: number, pos: Array<number>, callback?: any): Promise<void>;
    abstract setCenter(pos: Array<number>, callback?: any): Promise<void>;
    abstract getCenter(): Array<number>;
    abstract setMapTypeNone(): any;
    abstract setMapType(type: string): any;
    abstract getBoundsPoly(): Array<any>;
    abstract getZoom(): number;
    abstract setZoom(number: number, callback?: any): Promise<void>;
    toggleMapType: () => void;
    getMapModes(): MapModes;
    getLocation: () => void;
    addAction: (name: any, fn: any) => void;
    getActionName: (name: any) => string;
    setActionButtons: (actionButtons: any) => void;
    getActionButtons(): MapActionButtons;
    _readKml(path: any): Promise<unknown>;
    protected formatItem(item: any): any;
    _resolveLayer(layer: any): Promise<unknown>;
    addLayer(item: any): Promise<Layer>;
    loadLayers(): void;
    removeMarker: (marker: any) => void;
    addMarker: (item: any) => Promise<Marker>;
    selectMarker: (item: any) => void;
    selectLine: (item: any) => void;
    setIcon: (marker: Marker, image: any) => Promise<unknown>;
    addGroundOverlay: (item: any) => Promise<any>;
    addTileLayer: (item: any) => Promise<any>;
    addTilesetLayer: (item: any) => Promise<any>;
    setPosition: (marker: any, point: any) => void;
    addLine(item: any): Promise<unknown>;
    addPolygon(item: any): Promise<Polygon>;
    removePolygon(poly: any): void;
    removeLine(line: any): void;
    addPointToLine(line: any, point: any): void;
    updateLinePointAt(line: any, index: any, point: any): void;
    reverseLinePoints(line: any): void;
    removeLinePointAt(line: any, index: any): void;
    private _initMap;
}
